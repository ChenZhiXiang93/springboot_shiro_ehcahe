<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="czx.wt.mapper.UserMapper">
    <resultMap id="userMap" type="czx.wt.pojo.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="mobile" jdbcType="VARCHAR" property="mobile" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="insert_uid" jdbcType="INTEGER" property="insertUid" />
        <result column="insert_time" jdbcType="TIMESTAMP" property="insertTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="is_del" jdbcType="BIT" property="isDel" />
        <result column="is_job" jdbcType="BIT" property="isJob" />
        <result column="mcode" jdbcType="VARCHAR" property="mcode" />
        <result column="send_time" jdbcType="TIMESTAMP" property="sendTime" />
        <result column="version" jdbcType="INTEGER" property="version" />
    </resultMap>
    <sql id="Base_Column_List">
		id, username, mobile, email, password, insert_uid,
		insert_time, update_time, is_del,
		is_job, mcode, send_time, version
	</sql>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from user where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="czx.wt.pojo.User" useGeneratedKeys="true" keyProperty="id">
        insert into user(id,username,mobile,email,password,insert_uid,
		insert_time, update_time, is_del,
		is_job, mcode, send_time,version)
		values(#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR},
		#{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR}, #{insertUid,jdbcType=INTEGER},
		#{insertTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
		#{isDel,jdbcType=BIT}, #{isJob,jdbcType=BIT},
		#{mcode,jdbcType=VARCHAR}, #{sendTime,jdbcType=TIMESTAMP},0)
    </insert>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="userMap">
        select <include refid="Base_Column_List"/> from user where id = #{id,jdbcType=INTEGER}
    </select>

    <update id="updateByPrimaryKey" parameterType="czx.wt.pojo.User">
        update user set
        username = #{username,jdbcType=VARCHAR},
		mobile = #{mobile,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		insert_uid = #{insertUid,jdbcType=INTEGER},
		insert_time = #{insertTime,jdbcType=TIMESTAMP},
		update_time = #{updateTime,jdbcType=TIMESTAMP},
		is_del = #{isDel,jdbcType=BIT},
		is_job = #{isJob,jdbcType=BIT},
		mcode = #{mcode,jdbcType=VARCHAR},
		send_time = #{sendTime,jdbcType=TIMESTAMP},
		version = #{version,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="getUsers" parameterType="czx.wt.entity.UserSearchDTO" resultType="czx.wt.entity.UserRoleDTO">
        select id, username, mobile, email, insert_uid, insert_time,
		update_time,is_del,is_job,version from user
		<where>
            <if test="uname != null and uname != ''">
                username like CONCAT(CONCAT('%',#{uname}),'%')
            </if>
            <if test="umobile != null and umobile != ''">
                and mobile = #{umobile}
            </if>
            <if test="insertTimeStart != null and insertTimeStart != ''">
                and insert_time &gt;= #{insertTimeStart}
            </if>
            <if test="insertTimeEnd != null and insertTimeEnd != ''">
                and insert_time &lt;= #{insertTimeEnd}
            </if>
        </where>
        order by insert_time desc
    </select>

    <update id="setDelUser">
        update user
        set
        is_del = #{isDel,jdbcType=INTEGER},
		insert_uid = #{insertUid,jdbcType=INTEGER},
		update_time = NOW(),
		version=version + 1
	    where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="setJobUser">
        update user
        set
		is_job = #{isJob,jdbcType=INTEGER},
		insert_uid = #{insertUid,jdbcType=INTEGER},
		update_time = NOW(),
		version = version+1
		where id = #{id,jdbcType=INTEGER} AND is_del=0
    </update>

    <resultMap id="userAndRoles" type="czx.wt.entity.UserRolesVO">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="mobile" jdbcType="VARCHAR" property="mobile" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="insert_uid" jdbcType="INTEGER" property="insertUid" />
        <result column="insert_time" jdbcType="TIMESTAMP" property="insertTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="is_del" jdbcType="BIT" property="isDel" />
        <result column="is_job" jdbcType="BIT" property="isJob" />
        <result column="version" jdbcType="INTEGER" property="version" />
        <collection property="userRoles" ofType="czx.wt.pojo.UserRoleKey">
            <result column="user_id" property="userId" />
            <result column="role_id" property="roleId" />
        </collection>
    </resultMap>
    <select id="getUserAndRoles" parameterType="java.lang.Integer" resultMap="userAndRoles">
       select
        u.id, u.username,
		u.mobile, u.email, u.insert_uid insertUid,u.insert_time
		insertTime,u.update_time updateTime, u.is_del isDel,u.is_job isJob,u.version,
		ur.user_id,ur.role_id
		from
       user u
       inner join user_role ur
       on u.id = ur.user_id
       where id = #{id} and u.is_del=0 and u.is_job=0
    </select>

    <select id="findUser" parameterType="java.lang.String" resultType="czx.wt.pojo.User">
       select
		id, username, mobile,
		email, insert_uid insertUid, insert_time
		insertTime, update_time
		updateTime, is_del isDel,is_job
		isJob,mcode,send_time sendTime,version
		from user
		WHERE username=#{username} AND password =#{password} and
		is_del=0 and
		is_job=0
    </select>

    <!--=End findUser 根据用户名和密码查找用户 -->
    <!--=Start findUserByMobile 根据手机号获取用户数据 -->
    <select id="findUserByMobile" resultType="czx.wt.pojo.User">
		select
		id, username,
		mobile,password, email, insert_uid insertUid, insert_time
		insertTime,
		update_time, is_del,is_job,mcode,send_time sendTime,version
		from user
		WHERE
		mobile=#{mobile} and is_del=0
	</select>
    <!--=End findUserByMobile 根据手机号查找用户 -->
    <!--=Start findUserByName 根据用户名获取用户数据 -->
    <select id="findUserByName" resultType="czx.wt.pojo.User">
		select
		id, username,
		mobile, email, insert_uid insertUid, insert_time
		insertTime,
		update_time updateTime, is_del isDel,is_job
		isJob,mcode,send_time
		sendTime,version
		from user
		WHERE username=#{username} and is_del=0
	</select>

    <!--=End findUserByName 根据用户名查找用户 -->
    <!--=Start updatePwd 修改用户密码 -->
    <update id="updatePwd">
		update user
		set
		password = #{password},
		update_time=NOW()
		where id = #{id,jdbcType=INTEGER} and is_del=0 AND
		is_job=0
	</update>
    <!--=Start updatePwd 修改用户密码 -->
    <!--=Start setUserLockNum 锁定用户 -->
    <!-- <update id="setUserLockNum"> update user set is_lock = #{isLock}, lock_time=NOW()
        where id = #{id,jdbcType=INTEGER} and is_del=0 AND is_job=0 </update> -->
    <!--=Start setUserLockNum 锁定用户 -->
</mapper>